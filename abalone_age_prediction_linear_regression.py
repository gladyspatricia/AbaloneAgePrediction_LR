# -*- coding: utf-8 -*-
"""Abalone Age Prediction Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bAfzT5IYTdjKp16ge5J4otXeqelyCjcp

# LINEAR REGRESSION: ABALONE AGE PREDICTION

### IMPORT LIBRARY
"""

# Commented out IPython magic to ensure Python compatibility.
#Import Data

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
# %matplotlib inline

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

"""### IMPORT DATA"""

#Reading data

df = pd.read_csv("abalone.csv")
df.head()

df['Age'] = df['Rings']+1.5
df

"""### DATA UNDERSTANDING"""

#Jumlah baris dan kolom

print("No. of rows : ", df.shape[0])
print("No. of columns : ", df.shape[1])

#Melihat tipe data

df.info()

#Data summary

df.describe()

"""### MISSING VALUE"""

#Handlng missing value

df.isna().sum()

#tidak ada missing value pada data, step cleansing ini dapat dilewatkan

"""### LABEL ENCODING"""

#Label Encoding

sex_mapping = {label: idx for idx, label in enumerate(np.unique(df['Sex']))}
df['Sex'] = df['Sex'].map(sex_mapping)

df

"""### DATA DISTRIBUTION"""

#Distribution: dependent variable

df['Age'].plot.hist(color='blue').set(title="Distribusi Usia Abalone")

plt.tight_layout()
plt.show()

#Distribution: independent variable
features = ['Sex','Length', 'Diameter', 'Height', 'Whole weight', 'Shucked weight', 'Viscera weight', 'Shell weight']

fig, axes = plt.subplots(4,2,figsize=(16, 14))
axes = np.ravel(axes)

for i, c in enumerate(features):
    hist = df[c].plot(kind = 'hist', ax=axes[i], title=c, color='blue', bins=30)
    
plt.tight_layout()
plt.show()

#Scatter plot

fig, axes = plt.subplots(4,2,figsize=(16, 18))
axes = np.ravel(axes)

for i, c in enumerate(features):
    _ = sns.scatterplot(x=df[c],
                        y=df['Age'],
                        ax=axes[i],
                        color='blue')
    
    axes[i].set_title(f"{c} Vs age",
                      fontsize=14, 
                      fontweight='bold')
    
    axes[i].set_xlabel(c, fontsize=15)
    axes[i].set_ylabel('age', fontsize=15)
    
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(4,2,figsize=(16, 14))
axes = np.ravel(axes)

for i, c in enumerate(features):
    hist = df[c].plot(kind = 'box', ax=axes[i],color='blue', vert=False)
    axes[i].set_title(c, fontsize=15)
    
plt.tight_layout()
plt.show()

"""### CORRELATION"""

#Korelasi

plt.figure(figsize=(14,6))
sns.heatmap(df.corr(method='pearson'),
            annot=True,
            cbar=False,
            cmap='Blues')
plt.show()

"""### LINEAR REGRESSION"""

#Linear regression

column_names = ['Length', 'Diameter', 'Height', 'Whole weight', 'Shucked weight', 'Viscera weight', 'Shell weight']

X = df[column_names]
y = df['Rings']
model = LinearRegression(fit_intercept=False)
model.fit(X,y)
df['Predicted Age'] = model.predict(X) + 1.5

df

df[['Age', 'Predicted Age']].plot(alpha = 0.5);

params = pd.Series(model.coef_, index = X.columns)
params

from sklearn.utils import resample
np.random.seed(1)
err = np.std([model.fit(*resample(X,y)).coef_
             for i in range(1000)], 0)

print(pd.DataFrame({"effect": params.round(0),
                   "error" : err.round(0)}))

